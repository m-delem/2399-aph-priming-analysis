
# EDA

```{r}

# ─── RT distributions per participant, both tasks ─────────────────────────────

(df_explicit_rt |>
  ggplot(aes(x = rt, fill = subjectid)) +
  geom_density(alpha = .25, color = "black") +
  scale_x_continuous(name = "Response time", breaks = breaks_pretty(5)) +
  scale_y_continuous(name = "Density") +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
    ) +
  # coord_cartesian(
  #   xlim = c(350, 1320),
  #   ylim = c(0.0005, .01)
  # ) +
  scale_fill_viridis_d(guide = NULL) +
  scale_color_viridis_d(guide = NULL)) |>
  ggplotly() |>
  style(showlegend = FALSE)

(df_implicit_rt |>
  ggplot(aes(x = rt, fill = subjectid)) +
  geom_density(alpha = .25, color = "black") +
  scale_x_continuous(name = "Response time", breaks = breaks_pretty(5)) +
  scale_y_continuous(name = "Density") +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
    ) +
  # coord_cartesian(
  #   xlim = c(350, 1320),
  #   ylim = c(0.0005, .01)
  # ) +
  scale_fill_viridis_d(guide = NULL) +
  scale_color_viridis_d(guide = NULL)) |>
  ggplotly() |>
  style(showlegend = FALSE)
```

# Modelling

```{r}

# ─── Model checks ─────────────────────────────────────────────────────────────

# characteristics to check
model_checks = c("pp_check","homogeneity", "vif", "outliers", "qq", "reqq")

# plots
p_glmm_checks_explicit <-
  # best_glmm_explicit |> 
  glmm_ex |> 
  check_model(check = model_checks, detrend = FALSE)
p_glmm_checks_implicit <- 
  # best_glmm_implicit |> 
  glmm_im |> 
  check_model(check = model_checks, detrend = FALSE)

# exporting plots
ggexport(
  p_glmm_checks_explicit,
  filename = "plots/glmm-checks-explicit.png",
  width = 1000,
  height = 800,
  dpi = 600
  )

ggexport(
  p_glmm_checks_implicit,
  filename = "plots/glmm-checks-implicit.png",
  width = 1000,
  height = 800,
  dpi = 600
  )
```


```{r}

# ─── Setup variables for the plots ────────────────────────────────────────────

# dodge width for all the geoms
dw <- .75
# stat text size
st <- 7
# legend and axis text size
txt <- 14

# marginal means predictions
best_glmm_explicit_preds <-
  # best_glmm_explicit |>
  glmm_ex |> 
  estimate_means(at = c("aphantasia", "congruence"))

best_glmm_implicit_preds <-
  # best_glmm_implicit |>
  glmm_im |> 
  estimate_means(at = c("aphantasia", "congruence"))

# overall means and medians
rt_mean_explicit <- df_explicit_rt$rt |> mean()
rt_mean_implicit <- df_implicit_rt$rt |> mean()
```

## Explicit task

```{r}

# ─── Plotting Groups and Congruence ───────────────────────────────────────────

# annotations for significance
# plot_annotations_ex <-
#   df_explicit_rt |>
#   group_by(aphantasia) |> 
#   pairwise_wilcox_test(rt ~ congruence) |> 
#   add_xy_position(x = "congruence", group = "aphantasia", dodge = dw) |> 
#   mutate(
#     y.position = c(785, 795),
#     p.adj.signif = c("ns", "***")
#     )

# plot
p_glmm_explicit <-
  df_explicit_rt |>
  ggplot(aes(
    x = congruence,
    y = rt * 1000,
    color = aphantasia
  )) +
  # linear modelling of the differences
  geom_line(
    data = best_glmm_explicit_preds,
    aes(
      y = Mean * 1000,
      group = aphantasia
    ),
    position = position_dodge(width = dw),
    linewidth = 1.5,
    linetype = 1
  ) +
  # predicted means of the model
  geom_pointrange2(
    data = best_glmm_explicit_preds,
    aes(
      x = congruence,
      y = Mean * 1000,
      ymin = Mean * 1000 - SE * 1000,
      ymax = Mean * 1000 + SE * 1000,
      group = aphantasia
      ),
    color = "black",
    position = position_dodge(width = dw),
    size = 1,
    linewidth = .75,
    show.legend = FALSE
  ) +
  # intercept
  # geom_hline(yintercept = rt_mean_explicit, linetype = 2) +
  
  # stats display
  # stat_pvalue_manual(
  #   plot_explicit_annotations, 
  #   label = "p.adj.signif", 
  #   tip.length = 0,
  #   size = st
  #   ) +
  labs(
    title = "Explicit task",
    x = NULL,
    y = NULL
    # y = "Response time (ms)"
    ) +
  # coord_cartesian(
  #   ylim = c(680, 800)
  # ) +
  scale_y_continuous(breaks = breaks_pretty(6)) +
  scale_x_discrete(labels = c("Congruent", "Incongruent")) +
  scale_color_okabeito(name = "", labels = c("Aphantasic (VVIQ = 16)", "Control (VVIQ > 42)")) +
  theme(
    panel.grid.major.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_text(size = txt),
    legend.title = element_text(size = txt),
    legend.text = element_text(size = txt)
    )

p_glmm_explicit
```

#### Implicit task

```{r glmm_plots_im}

# ─── Plotting Groups and Congruence ───────────────────────────────────────────

# annotations
# plot_implicit_annotations <-
#   df_implicit_rt |>
#   group_by(aphantasia) |>
#   pairwise_wilcox_test(rt ~ congruence) |>
#   add_xy_position(x = "congruence", group = "aphantasia", dodge = dw) |>
#   mutate(
#     y.position = c(680, 687),
#     p.adj.signif = c("ns", "*")
#     )

# ─── Model effects plot ───────────────────────────
p_glmm_implicit <-
  df_implicit_rt |>
  ggplot(aes(
    x = congruence,
    y = rt * 1000,
    color = aphantasia
  )) +
  # linear modelling of the differences
  geom_line(
    data = best_glmm_implicit_preds,
    aes(
      y = Mean * 1000,
      group = aphantasia
    ),
    position = position_dodge(width = dw),
    linewidth = 1.5,
    linetype = 1
  ) +
  # predicted means of the model
  geom_pointrange2(
    data = best_glmm_implicit_preds,
    aes(
      x = congruence,
      y = Mean * 1000,
      ymin = Mean * 1000 - SE * 1000,
      ymax = Mean * 1000 + SE * 1000,
      group = aphantasia
      ),
    color = "black",
    position = position_dodge(width = dw),
    size = 1,
    linewidth = .75,
    show.legend = FALSE
  ) +
  # intercept
  # geom_hline(yintercept = rt_mean_implicit * 1000, linetype = 2) +
  annotate(
    geom  = "text",
    label = "*",
    fontface = "italic",
    color = "#56b4e9",
    x = 2.05,
    y = 628,
    vjust = .1,
    hjust = 6,
    size  = 12 
    ) +
  # stats display
  # stat_pvalue_manual(
  #   plot_implicit_annotations,
  #   label = "p.adj.signif",
  #   tip.length = 0,
  #   size = st
  #   ) +
  labs(
    title = "Implicit task",
    x = NULL,
    y = "Response time (ms)"
    ) +
  # coord_cartesian(
  #   ylim = c(.60, .69)
  # ) +
  scale_y_continuous(breaks = breaks_pretty(9)) +
  scale_x_discrete(labels = c("Congruent", "Incongruent")) +
  scale_color_okabeito(name = "", labels = c("Aphantasic (VVIQ = 16)", "Control (VVIQ > 42)")) +
  theme(
    panel.grid.major.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_text(size = txt),
    legend.title = element_text(size = txt),
    legend.text = element_text(size = txt)
    )

p_glmm_implicit
```


:::

``` {r glmm_ggarrange}
#| label: fig-glmm_ggarrange

p_glmms <-
  ggarrange(
    p_glmm_implicit,
    p_glmm_explicit,
    common.legend = TRUE,
    legend = "top",
    ncol = 2,
    align = "v"
  )

ggexport(
  p_glmms, 
  filename = "plots/02-plots-glmms-floor.png", 
  width = 4000,
  height = 1500,
  res = 300
  )
```

```{r}
glmm_ex <- readRDS(file = "analyses-results/02-glmm-floor-inverse-id-explicit.RDS")
glmm_im <- readRDS(file = "analyses-results/02-glmm-floor-inverse-id-implicit.RDS")
```


















































