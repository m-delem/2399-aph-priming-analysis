---
title: "Sensory priming in aphantasia - Data analysis"
author: "MaÃ«l Delem"
format: html
editor_options: 
  chunk_output_type: console
---

This analysis was conducted in R language through the RStudio Integrated Development Environment. Just down below is the setup code, including two essential steps: 1) installing the required packages for this data analysis, and 2) importing data into the dataframes used throughout. I left this (usually hidden) step there for reference in a view of transparency for the interested reader.

```{r setup}

# --- Packages -----------------------------------------------------------------

# The package `librairian` will ease the package management with the "shelf" 
# function, which automatically: 
# 1) checks if a package is installed 
# 2) installs it if need be
# 3) loads the package like the "library()" function would.
if (!require(librarian)) install.packages(librarian)
library(librarian)

# now putting packages on our library's shelves:
shelf(
  # Excel files management
  readxl,
  # --- data analysis packages:
  easystats,      # framework for data analysis functions
  brms,           # bayesian modeling
  tidymodels,
  bayesian,
  # MASS,           # Box-Cox transformation
  # cluster,        # self-explanatory (i.e. cluster analyses)
  mclust,         # mixture clustering
  # factoextra,     # multivariate analysis visualization
  # FactoMineR,     # multivariate analysis
  # rstanarm,       # bayesian models
  # BayesFactor,    # self-explanatory (i.e. Bayes Factors)
  # --- data visualization/exploration packages:
  ggpubr,         # layout and statistics display
  # ggradar,        # radar charts
  ggsci,          # scientific palettes
  wesanderson,    # artistic palettes
  viridis,        # colour-blind friendly palettes
  tidygraph,
  ggraph,
  # --- tables ---
  # qwraps2,        # mean_sd function
  # the basics
  tidyverse
)

# --- Global cosmetic theme ----------------------------------------------------
theme_set(
  theme_bw(
    base_size = 14,
    # base_family = "serif",
  )
)

# creating colour-blind friendly coulour palettes
# duo_pal <- c("#003d73", "#889be0")
# trio_pal <- c("#f2bb7b", "#e57774", "#6c0009")
# full_pal <- c("#f2bb7b", "#e57774", "#6c0009", "#003d73", "#889be0")

# table formatting
# options(qwraps2_markup = "")
# options(
#   knitr.kable.NA = '',
#   knitr.table.format = "markdown")

# --- Fixing a seed for reproducibility ----------------------------------------
set.seed(14051998)

# --- Importing data -----------------------------------------------------------

# Association task
df_asso <- read_excel("data/aphantasia_priming_tidy_data.xlsx", 
                     sheet = "data_asso")

# Implicit task
df_implicit <- read_excel("data/aphantasia_priming_tidy_data.xlsx", 
                     sheet = "data_implicit")

# Explicit task
df_explicit <- read_excel("data/aphantasia_priming_tidy_data.xlsx", 
                     sheet = "data_explicit")

# Rotation task
df_rotation <- read_excel("data/aphantasia_priming_tidy_data.xlsx", 
                     sheet = "data_rotation")

# Questionnaires
df_questionnaires <- 
  read_excel(
    "data/aphantasia_priming_tidy_data.xlsx",
    sheet = "data_questionnaires"
    ) %>% 
  mutate(aphantasia = ifelse(vviq80 >= 32, "no", "yes"))

dfs <- list(df_asso, df_implicit, df_explicit, df_rotation)

dfs_vviq <-
  dfs %>% 
  imap(~left_join(
    .x, 
    df_questionnaires %>% 
      select(subjectid, vviq80, aphantasia)))

df_asso_vviq     <- dfs_vviq[[1]]
df_implicit_vviq <- dfs_vviq[[2]]
df_explicit_vviq <- dfs_vviq[[3]]
df_rotation_vviq <- dfs_vviq[[4]]
```

## Exploratory Data Analysis

The four questionnaire variables - VVIQ, OSIQ-Object and Spatial, and SUIS - are meant to be used as predictors (independent variables) for the behavioural outcomes of the experiment (dependent variables, RTs and potentially accuracy). Three of these - VVIQ, OSIQ-Object and SUIS - evaluate visual imagery: as such, in a view of parsimony, we are going to evaluate the correlation between these continuous predictors and judge if they should be merged/omitted. The results of the Bayesian partial correlations between the four variables are displayed in @fig-cor_matrix and @tbl-cor_stats. Partial correlations have been chosen here to account for the (theoretically huge) covariance between visual imagery variables. It will result in more conservative estimations of the correlations, and a better understanding of the relations between visual and spatial imagery measures.

```{r correlation}

# --- Bayesian Pearson correlation between questionnaire scores ----------------
cor_questionnaires <-
  df_questionnaires %>%
  select("vviq80", "suis60","osiq_o75", "osiq_s75") %>% 
  standardise %>% 
  correlation(
    bayesian = TRUE,
    partial = TRUE,
    partial_bayesian = TRUE,
    bayesian_test = "bf"
    )
```

```{r correlation_matrix}
#| label: fig-cor_matrix
#| echo: false
#| fig-cap: "Correlation matrix of the questionnaire variables. The stars indicate the amount of evidence in favour of a correlation, as assessed by the $BF_{10}$: No star = Anecdotal evidence, * = Weak evidence, ** = Moderate evidence, *** = Extreme evidence."

# --- Correlation matrix -------------------------------------------------------
cor_questionnaires %>%
  mutate(across(c(Parameter1, Parameter2),
    ~ case_when(
    .x == "vviq80" ~ "VVIQ",
    .x == "suis60" ~ "SUIS",
    .x == "osiq_o75" ~ "OSIQ-O",
    .x == "osiq_s75" ~ "OSIQ-S"))
    ) %>% 
  summary(digits = 2) %>% 
  plot(
    text = list(size = 5),
    labs = list(title = "")
    ) +
  scale_fill_viridis(
    option = "D",
    name = expression(rho),
    alpha = .6,
    direction = 1,
    limits = c(-1,1)
    ) +
  theme_bw() +
  theme(
    panel.grid = element_blank(),
    axis.text = element_text(size = 14)
    )
```

```{r correlation_table}
#| label: tbl-cor_stats
#| echo: false
#| tbl-cap: "Detailed correlation table of the questionnaire variables."

# --- Correlation table --------------------------------------------------------
cor_questionnaires %>%
  format %>% 
  mutate(across(c(Parameter1, Parameter2),
    ~ case_when(
    .x == "vviq80" ~ "VVIQ",
    .x == "suis60" ~ "SUIS",
    .x == "osiq_o75" ~ "OSIQ-O",
    .x == "osiq_s75" ~ "OSIQ-S"))
    ) %>% 
  rename(
    "Variable 1" = Parameter1,
    "Variable 2" = Parameter2,
    "$\\rho$" = rho,
    "$BF_{10}$" = BF
  ) %>% 
  knitr::kable()
```

As we can see, while the three visual imagery variables are highly correlated, the association between these variable and spatial imagery (OSIQ-S) is inconsistent: VVIQ and OSIQ-S are positively correlated although with anecdotal evidence, SUIS and OSIQ-S have a moderately evidenced positive correlation, while OSIQ-Object and OSIQ-Spatial are negatively correlated. We'll run a Principal Component Analysis to evaluate the possibility of a feature reduction of visual imagery as a single variable.

```{r pca}
# --- Principal Component Analysis ---------------------------------------------
pca <- 
  principal_components(
    df_questionnaires[,4:7],
    n = "max",
    sort = TRUE,
    standardize = TRUE
    ) 
```

```{r loadings}
#| label: fig-loadings
#| echo: false
#| fig-cap: "Loadings of each variable on the three components extracted by a PCA."

# --- Loadings -----------------------------------------------------------------
pca %>% plot + 
  scale_y_discrete(labels = c("OSIQ-S", "OSIQ-O", "VVIQ", "SUIS")) +
  scale_fill_viridis(alpha = .6) +
  labs(title = NULL) +
  theme(text = element_text(size = 14))
```

```{r eigenvalues}
#| label: tbl-eigenvalues
#| echo: false
#| tbl-cap: "Eigenvalues and variance explained by the three components extracted by a PCA."

# --- Eigenvalues and variance -------------------------------------------------
pca %>% 
  summary %>% 
  rename(
    "Component 1" = PC1,
    "Component 2" = PC2,
    "Component 3" = PC3,
  ) %>%
  format(digits = 2) %>% 
  display
```

As expected, the visual imagery variables are grouped in a single component with an Eigenvalue of 2.84, therefore accounting for 71% of the total variance of the data. The second component has an Eigenvalue of .97, accounts for 24% of the total variance, and is mostly loaded negatively on the OSIQ-S: this brings the total explained proportion of variance to 95%. Traditionally, the threshold used for selecting a principal component is an Eigenvalue of 1. Nevertheless, given the Eigenvalue of .97 and the properties of this component, i.e. singling out the specificity of the spatial scale, this component will be kept for analysis.

Standardized predicted values for each component will be computed and added to the data, renamed *Visual Imagery* (PC1, mostly VVIQ + SUIS + OSIQ-O with an influence of OSIQ-S) and *Spatial Imagery* (PC2, mostly OSIQ-S, with an influence of SUIS). In order to align the *Spatial Imagery* variable with the OSIQ-Spatial, the variable will be reversed (they are correlated negatively as it is, as shown by the -.96 loading on PC2).

```{r components}
pca_components <- pca %>% predict

df_questionnaires_pca <- 
  bind_cols(df_questionnaires, pca_components[,1:2]) %>% 
  mutate(
    PC1 = standardize(PC1),
    PC2 = -standardize(PC2)
    ) %>% 
  rename(
    "visual_imagery" = PC1,
    "spatial_imagery" = PC2
    )
```

Now we can see that the main visual imagery variables, namely the (conventional) VVIQ and the *Visual Imagery* component created through PCA are completely decorrelated from the *Spatial Imagery* component, as shown in @fig-spatial_corr.

```{r components}
#| label: fig-spatial_corr
#| echo: false
#| fig-cap: "Correlation between the main visual imagery variables and the spatial imagery component."
#| fig-width: 10
#| fig-height: 5

# --- correlation between visual and spatial ---
spatial_cor1 <- df_questionnaires_pca %>% 
  mutate(
    visual_imagery = rescale(visual_imagery),
    spatial_imagery = rescale(spatial_imagery)
    ) %>%
  ggplot(aes(x = visual_imagery, y = spatial_imagery, color = aphantasia)) +
  geom_point() +
  scale_color_okabeito(name = "Aphantasia", labels = c("No", "Yes")) +
  geom_smooth(
    aes(x = visual_imagery, y = spatial_imagery), 
    color = "black", 
    method = "lm", 
    stat = "smooth") +
  stat_cor(
    aes(x = visual_imagery, 
        y = spatial_imagery), 
    inherit.aes = FALSE, 
    cor.coef.name = "r", 
    label.x.npc = .5,
    label.y.npc = .7) +
  labs(x = "Visual Imagery",
       y = "Spatial Imagery")

# --- correlation between vviq and spatial ---
spatial_cor2 <- df_questionnaires_pca %>% 
  mutate(
    vviq80 = rescale(vviq80),
    spatial_imagery = rescale(spatial_imagery)
    ) %>%
  ggplot(aes(x = vviq80, y = spatial_imagery, color = aphantasia)) +
  geom_point() +
  scale_color_okabeito(name = "Aphantasia", labels = c("No", "Yes")) +
  geom_smooth(
    aes(x = vviq80, y = spatial_imagery), 
    color = "black", 
    method = "lm", 
    stat = "smooth") +
  stat_cor(
    aes(x = vviq80, 
        y = spatial_imagery), 
    inherit.aes = FALSE, 
    cor.coef.name = "r", 
    label.x.npc = .5,
    label.y.npc = .7) +
  labs(x = "VVIQ",
       y = "Spatial Imagery")

ggarrange(
  spatial_cor1,
  spatial_cor2 + rremove("ylab"),
  common.legend = TRUE,
  legend = "bottom"
)

```




























