name = "Proportion of the group",
breaks = breaks_pretty(n = 10)
) +
coord_cartesian(
xlim = c(1, 40),
ylim = c(.01,.28)
) +
# labs(title = "Implicit task") +
scale_color_okabeito(guide = NULL) +
scale_fill_okabeito(name = "Aphantasia", labels = c("Yes", "No"))) |>
# plotly-ing it
ggplotly()
#| code-summary: "Removing incorrect trials and task-wise accuracy outliers"
#| echo: true
#| output: false
# ═══ Accuracy outliers analysis ═══════════════════════════════════════════════
# ─── Listing error rates per subject ───
list(df_explicit, df_implicit) |>
imap(
~.x |>
select(subjectid, starts_with("correct"), aphantasia) |>
group_by(subjectid) |>
count(pick(2)) |>
filter(pick(1) == 1) |>
ungroup() |>
mutate(
n_tot = max(n),
prop = (n_tot - n) / n_tot * 100  # analyzing the error rate per subject
) %>%
arrange(desc(prop)) |>
select(1, 5)
)
# 5 accuracy outliers in the explicit task, 4 in the implicit one
# ─── Removing incorrect trials and task-wise accuracy outliers ───
df_explicit_rt <-
df_explicit |>
# filtering out...
filter(
# incorrect trials
correct_explicit == 1 &
# participants identified with with high error rates
!(subjectid %in% c(
"aknezevic",
"bdispaux",
"lbrunie",
"eleveque",
"agayou",
"bluciani",
"ldossantos",
"aleclaire",
"dchimenton"))
) |>
# removing irrelevant variables
select(-c(sex, vviq80, orientation, response, correct_explicit))
# percentage of trials removed in the explicit task
(count(df_explicit) - count(df_explicit_rt)) / count(df_explicit)
# 8842 trials left = 8.5% removed
df_implicit_rt <-
df_implicit |>
filter(
correct_implicit == 1 &
!(subjectid %in% c(
"aknezevic",
"bdispaux",
"lbrunie",
"eleveque",
"agayou",
"bluciani",
"ldossantos",
"aleclaire",
"dchimenton"))
) |>
select(-c(sex, vviq80, orientation, response, correct_implicit))
# percentage of trials removed in the implicit task
(count(df_implicit) - count(df_implicit_rt)) / count(df_implicit)
# 8765 trials left = 9.3% removed
#| code-summary: "Removing extreme RTs"
#| echo: true
#| output: false
# ═══ First broad RT outlier trials removal ════════════════════════════════════
df_explicit_rt <-
df_explicit_rt |>
# filtering out extreme RTs
filter(rt > 300 & rt < 3000)
# total percentage of trials removed in the explicit task
(count(df_explicit) - count(df_explicit_rt)) / count(df_explicit)
# 8753 trials left = 9.4% removed
df_implicit_rt <-
df_implicit_rt |>
filter(rt > 300 & rt < 3000)
# total percentage of trials removed in the implicit task
(count(df_implicit) - count(df_implicit_rt)) / count(df_implicit)
# 8706 left = 9.9% removed
#| label: fig-rt_means1
#| fig-cap: "Distribution of the mean RTs of participants in the explicit task (very high RT means have been cut for better readability)."
#| fig-height: 4
# ═══ RT means plot - Explicit task ════════════════════════════════════════════
(df_explicit_rt |>
group_by(subjectid) |>
summarise(mean = mean(rt)) |>
ggplot(aes(x = mean)) +
geom_histogram(
fill = "aquamarine2",
color = "aquamarine4",
alpha = .3,
bins = 70
# adjust = .4
) +
labs(x = "Mean RT", y = "Number of participants") +
scale_y_continuous(breaks = seq(0, 13, by = 1))) |>
ggplotly()
#| label: fig-rt_means2
#| fig-cap: "Distribution of the mean RTs of participants in the implicit task (very high RT means have been cut for better readability)."
#| fig-height: 4
# ═══ RT means plot - Implicit task ════════════════════════════════════════════
(df_implicit_rt |>
group_by(subjectid) |>
summarise(mean = mean(rt)) |>
ggplot(aes(x = mean)) +
geom_histogram(
fill = "coral2",
color = "coral4",
alpha = .3,
bins = 70
# adjust = .4
) +
labs(x = "Mean RT", y = "Number of participants") +
scale_y_continuous(breaks = seq(0, 9, by = 1))) |>
ggplotly()
#| label: tbl-rt_means
#| tbl-cap: "Descriptive statistics of the average RTs across the sample in both tasks."
# ═══ RT means table - Both tasks ══════════════════════════════════════════════
df_rt <-
list(
df_explicit_rt |>  rename("Explicit task mean RTs" = rt),
df_implicit_rt |>  rename("Implicit task mean RTs" = rt)
) |>
imap(
~select(.x, contains("RT")) |>
report() |>
as.data.frame() |>
select(1:10)
)
df_rt <- bind_rows(df_rt[[1]], df_rt[[2]])
df_rt |>  display()
#| code-summary: "Removing outliers with aberrant RT means"
#| echo: true
#| output: false
# ═══ Aberrant RT means outliers removal ═══════════════════════════════════════
# ─── Finding outliers ───
df_explicit_rt |>
group_by(subjectid) |>
summarise(mean_rt_explicit = mean(rt)) |>
ungroup() |>
filter(mean_rt_explicit > 1373) |>
arrange(desc(mean_rt_explicit))
# 7 outliers in the explicit task
df_implicit_rt |>
group_by(subjectid) |>
summarise(mean_rt_implicit = mean(rt)) |>
ungroup() |>
filter(mean_rt_implicit > 1063) |>
arrange(desc(mean_rt_implicit))
# 4 outliers in the implicit task
# ─── Removing specific outliers ───
df_explicit_rt <-
df_explicit_rt |>
filter(
!(subjectid %in% c(
"fc",
"mbilodeau",
"llhermitte",
"hmassot",
"mbillon",
"nnguyenphuoc",
"rcarnez",
"cbertrand",
"omeyer"
))
)
# 133 participants and 8229 trials left
# (9664-8229)/9664 # 14.8% out
# alternative point of view: 18 participants excluded in the explicit task due to high error rates or overall abnormally slow RTs.
df_implicit_rt <-
df_implicit_rt |>
filter(
!(subjectid %in% c(
"fc",
"mbilodeau",
"llhermitte",
"hmassot",
"mbillon",
"nnguyenphuoc",
"rcarnez",
"cbertrand",
"omeyer"
))
)
# 133 partcipants and 8166 trials left
# (9664-8166)/9664 # 15.5% out
# alternative point of view: 18 participants excluded in the implicit task due to high error rates or overall abnormally slow RTs.
#| label: fig-rt_means3
#| fig-cap: "Distribution of the mean RTs of participants in the explicit task after outlier removal."
#| fig-height: 4
# ═══ RT means final plot - Explicit task ══════════════════════════════════════
(df_explicit_rt |>
group_by(subjectid) |>
summarise(mean = mean(rt)) |>
ggplot(aes(x = mean)) +
geom_histogram(
fill = "aquamarine2",
color = "aquamarine4",
alpha = .3,
bins = 70
# adjust = .4
) +
labs(x = "Mean RT", y = "Number of participants") +
scale_y_continuous(breaks = seq(0, 13, by = 1))) |>
ggplotly()
#| label: fig-rt_means4
#| fig-cap: "Distribution of the mean RTs of participants in the implicit task after outlier removal."
#| fig-height: 4
# ═══ RT means final plot - Implicit task ══════════════════════════════════════
(df_implicit_rt |>
group_by(subjectid) |>
summarise(mean = mean(rt)) |>
ggplot(aes(x = mean)) +
geom_histogram(
fill = "coral2",
color = "coral4",
alpha = .3,
bins = 70
# adjust = .4
) +
labs(x = "Mean RT", y = "Number of participants") +
scale_y_continuous(breaks = seq(0, 9, by = 1))) |>
ggplotly()
#| label: fig-rt_per_participant_1
#| fig-cap: "Distribution of RTs in the explicit task for each participant. Each colored distribution represents a single participant. *Hover to see details on the individual distributions*."
#| fig-height: 5
# ═══ RTs per participant plot - Explicit task ═════════════════════════════════
(df_explicit_rt |>
ggplot(aes(x = rt, fill = subjectid)) +
geom_density(alpha = .25, color = "black") +
scale_x_continuous(name = "Response time", breaks = breaks_pretty(10)) +
scale_y_continuous(name = "Density") +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) +
# coord_cartesian(
#   xlim = c(380, 1700),
#   ylim = c(0.0005, .01)
# ) +
scale_fill_viridis_d(guide = NULL) +
scale_color_viridis_d(guide = NULL)) |>
ggplotly() |>
style(showlegend = FALSE)
#| label: fig-rt_per_participant_2
#| fig-cap: "Distribution of RTs in the implicit task for each participant. Each colored distribution represents a single participant. *Hover to see details on the individual distributions*."
#| fig-height: 5
# ═══ RTs per participant plot - Implicit task ═════════════════════════════════
(df_implicit_rt |>
ggplot(aes(x = rt, fill = subjectid)) +
geom_density(alpha = .25, color = "black") +
scale_x_continuous(name = "Response time", breaks = breaks_pretty(5)) +
scale_y_continuous(name = "Density") +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) +
# coord_cartesian(
#   xlim = c(350, 1320),
#   ylim = c(0.0005, .01)
# ) +
scale_fill_viridis_d(guide = NULL) +
scale_color_viridis_d(guide = NULL)) |>
ggplotly() |>
style(showlegend = FALSE)
#| code-summary: "Removing outlier trials by-participant"
#| echo: true
#| output: false
# ═══ By-participant MAD outlier detection ═════════════════════════════════════
# ─── Explicit task: ───
# From 8229 observations
# 3 MADs threshold
df_explicit_rt <-
df_explicit_rt |>
group_by(subjectid, congruence, color) |>
mutate(
rt_median = median(rt),
rt_mad = mad(rt)
) |>
filter(
rt < rt_median + 3 * rt_mad &
rt > rt_median - 3 * rt_mad
) |>
ungroup()
# 7687 trials left
# (8229-7687)/8229 # 6.6% trials out
# ─── Implicit task: ───
# From 8166 observations
# 3 MADs threshold
df_implicit_rt <-
df_implicit_rt |>
group_by(subjectid, congruence, color) |>
mutate(
rt_median = median(rt),
rt_mad = mad(rt)
) |>
filter(
rt < rt_median + 3 * rt_mad &
rt > rt_median - 3 * rt_mad
) |>
ungroup()
# 7489 trials left
# (8166-7489)/8166 # 8.2% trials out
#| label: fig-rt_per_participant_3
#| fig-cap: "Resulting distribution of RTs in the explicit task for each participant. Each colored distribution represents a single participant. *Hover to see details on the individual distributions*."
#| fig-height: 5
# ═══ RTs per participant final plot - Explicit task ═══════════════════════════
(df_explicit_rt |>
ggplot(aes(x = rt, fill = subjectid)) +
geom_density(alpha = .25, color = "black") +
scale_x_continuous(name = "Response time", breaks = breaks_pretty(10)) +
scale_y_continuous(name = "Density") +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) +
# coord_cartesian(
#   xlim = c(380, 1700),
#   ylim = c(0.0005, .01)
# ) +
scale_fill_viridis_d(guide = NULL) +
scale_color_viridis_d(guide = NULL)) |>
ggplotly() |>
style(showlegend = FALSE)
#| label: fig-rt_per_participant_4
#| fig-cap: "Resulting distribution of RTs in the implicit task for each participant. Each colored distribution represents a single participant. *Hover to see details on the individual distributions*."
#| fig-height: 5
# ═══ RTs per participant final plot - Implicit task ═══════════════════════════
(df_implicit_rt |>
ggplot(aes(x = rt, fill = subjectid)) +
geom_density(alpha = .25, color = "black") +
scale_x_continuous(name = "Response time", breaks = breaks_pretty(5)) +
scale_y_continuous(name = "Density") +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) +
# coord_cartesian(
#   xlim = c(350, 1320),
#   ylim = c(0.0005, .01)
# ) +
scale_fill_viridis_d(guide = NULL) +
scale_color_viridis_d(guide = NULL)) |>
ggplotly() |>
style(showlegend = FALSE)
shelf(doParallel)
shelf(doParallel) |> system.time()
(test <- 1+1) |> system.time() -> time_one_core
(test <- model_parameters(best_glmm_explicit)) |> system.time() -> time_one_core
(test <- rnorm(1000000000000)) |> system.time() -> time_one_core
(test <- rnorm(10000)) |> system.time() -> time_one_core
time_one_core
(test <- rnorm(100000000)) |> system.time() -> time_one_core
time_one_core
#| code-summary: "Fitting all the models with `tidymodels` (Warning: long code chunk)"
#| echo: true
#| output: false
# ═══ Fitting Generalized Linear Mixed Models ══════════════════════════════════
# ─── Preparing variable roles ─────────────────────────────────────────────────
model_recipe_glmm_ex <-
df_explicit_rt |>
recipe() |>
update_role(rt, new_role = "outcome") %>%
update_role(
subjectid, age, aphantasia, color, congruence,
new_role = "predictor"
) |>
add_role(subjectid, new_role = "group")
model_recipe_glmm_im <-
df_implicit_rt |>
recipe() |>
update_role(rt, new_role = "outcome") %>%
update_role(
subjectid, age, aphantasia, color, congruence,
new_role = "predictor"
) |>
add_role(subjectid, new_role = "group")
# Adding pre-processing steps to Box-Cox and normalize RTs in LMMs
model_recipe_lmm_ex <-
model_recipe_glmm_ex |>
step_BoxCox(rt) |>
step_normalize(rt)
model_recipe_lmm_im <-
model_recipe_glmm_im |>
step_BoxCox(rt) |>
step_normalize(rt)
# ─── Specifying the distributions for the models ──────────────────────────────
# GLMM, Gamma distribution, identity link
glmm_gamma_id <-
linear_reg() |>
set_engine(
"glmer",
family = Gamma(link = "identity")
)
# GLMM, Inverse Gaussian distribution, identity link
glmm_inverse_id <-
linear_reg() |>
set_engine(
"glmer",
family = inverse.gaussian(link = "identity")
)
# GLMM, Inverse Gaussian distribution, log link
glmm_inverse_log <-
linear_reg() |>
set_engine(
"glmer",
family = inverse.gaussian(link = "log")
)
# LMM = GLMM with a Gaussian distribution and identity link
glmm_gaussian <-
linear_reg() |>
set_engine("lmer")
# Listing these models
# GLMMs
model_specs_glmm <- list(
glmm_gamma_id    = glmm_gamma_id,
glmm_inverse_id  = glmm_inverse_id,
glmm_inverse_log = glmm_inverse_log,
glmm_gaussian    = glmm_gaussian
)
# LMM spec for transformed data
model_spec_lmm <- list(lmm_boxcox = glmm_gaussian)
# ─── Writing down the formulas of our models ──────────────────────────────────
# null model
formula_0 <- rt ~ (1|subjectid)
# intercept by-participant only
formula_1 <- rt ~ (aphantasia + congruence + color)^2 + (1|subjectid)
# intercept and slope on congruence by-participant
formula_2 <- rt ~ (aphantasia + congruence + color)^2 + (congruence|subjectid)
# intercept and slope on color by-participant
formula_3 <- rt ~ (aphantasia + congruence + color)^2 + (color|subjectid)
# intercept and slope on congruence and color by-participant
formula_4 <- rt ~ (aphantasia + congruence + color)^2 + (congruence|subjectid) + (color|subjectid)
# Listing these formulas
model_formulas <- list(
formula_0 = formula_0,
formula_1 = formula_1,
formula_2 = formula_2,
formula_3 = formula_3,
formula_4 = formula_4
)
# ─── Table to combine everything in workflows and fit the models ──────────────
(
model_all_workflows_fitted <-
tribble(       ~recipe,     ~ task,           ~model,       ~formula,
model_recipe_glmm_ex, "explicit", model_specs_glmm, model_formulas,
model_recipe_glmm_im, "implicit", model_specs_glmm, model_formulas,
model_recipe_lmm_ex, "explicit",   model_spec_lmm, model_formulas,
model_recipe_lmm_im, "implicit",   model_spec_lmm, model_formulas,
) |>
# combining recipes with models
unnest_longer(model) |>
# combining them with formulas
unnest_longer(formula) |>
rowwise() |>
mutate(
# creating workflows
workflow = list(
workflow() |>
add_recipe(recipe) |>
add_model(model, formula = formula)
),
# fitting all the workflows (models) for each task
fitted_model = ifelse(
task == "explicit",
list(workflow |> fit(data = df_explicit_rt) |> extract_fit_engine()),
list(workflow |> fit(data = df_implicit_rt) |> extract_fit_engine())
),
# extracting the parameters of the models
parameters = list(model_parameters(fitted_model)),
# checking the convergence of the models
convergence = check_convergence(fitted_model),
# model quality indices
model_perf = list(model_performance(fitted_model)),
AIC  = model_perf[[1]],
AICc = model_perf[[2]],
BIC  = model_perf[[3]]
) |>
ungroup() |>
select(-c(recipe, model, formula, model_perf))
) |>
system.time() -> time_one_core
# ─── Comparing the models' quality among those that converged ─────────────────
model_selection <-
model_all_workflows_fitted |>
filter(
formula_id != "formula_0" &
convergence == TRUE
) |>
group_by(task, model_id) |>
mutate(best_model = ifelse(AICc == min(AICc), TRUE, FALSE)) |>
filter(best_model == TRUE)
# inverse log models with random intercepts per-participant are the best GLMMs
# for both tasks
time_one_core
getDoParWorkers()
registerDoSEQ()
getDoParWorkers()
